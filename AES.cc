#include<iostream>
#include<bitset>
#include<vector>
#include<string>
#include <sstream>
using namespace std;
typedef bitset<8> byte;
typedef vector<byte> Row;

Row key;
Row block;
static int Nb, Nk, Nr;

struct word {
  byte byte1;
  byte byte2;
  byte byte3;
  byte byte4;
};
typedef vector<word> Mat;
static Mat arrayWords;


static string to_hex(byte a){
	stringstream res;
	res << hex << uppercase << a.to_ulong();
	return res.str();
}

static int todecimal(byte x){
  int aux = (int)(x.to_ulong());
  return aux;
}


static vector<byte> sBox = {
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

static vector<byte> rCon = {
 0x8d,  0x01,  0x02,  0x04,  0x08,  0x10,  0x20,  0x40,  0x80,  0x1b,  0x36,  0x6c,  0xd8,  0xab,  0x4d,  0x9a,
 0x2f,  0x5e,  0xbc,  0x63,  0xc6,  0x97,  0x35,  0x6a,  0xd4,  0xb3,  0x7d,  0xfa,  0xef,  0xc5,  0x91,  0x39,
 0x72,  0xe4,  0xd3,  0xbd,  0x61,  0xc2,  0x9f,  0x25,  0x4a,  0x94,  0x33,  0x66,  0xcc,  0x83,  0x1d,  0x3a,
 0x74,  0xe8,  0xcb,  0x8d,  0x01,  0x02,  0x04,  0x08,  0x10,  0x20,  0x40,  0x80,  0x1b,  0x36,  0x6c,  0xd8,
 0xab,  0x4d,  0x9a,  0x2f,  0x5e,  0xbc,  0x63,  0xc6,  0x97,  0x35,  0x6a,  0xd4,  0xb3,  0x7d,  0xfa,  0xef,
 0xc5,  0x91,  0x39,  0x72,  0xe4,  0xd3,  0xbd,  0x61,  0xc2,  0x9f,  0x25,  0x4a,  0x94,  0x33,  0x66,  0xcc,
 0x83,  0x1d,  0x3a,  0x74,  0xe8,  0xcb,  0x8d,  0x01,  0x02,  0x04,  0x08,  0x10,  0x20,  0x40,  0x80,  0x1b,
 0x36,  0x6c,  0xd8,  0xab,  0x4d,  0x9a,  0x2f,  0x5e,  0xbc,  0x63,  0xc6,  0x97,  0x35,  0x6a,  0xd4,  0xb3,
 0x7d,  0xfa,  0xef,  0xc5,  0x91,  0x39,  0x72,  0xe4,  0xd3,  0xbd,  0x61,  0xc2,  0x9f,  0x25,  0x4a,  0x94,
 0x33,  0x66,  0xcc,  0x83,  0x1d,  0x3a,  0x74,  0xe8,  0xcb,  0x8d,  0x01,  0x02,  0x04,  0x08,  0x10,  0x20,
 0x40,  0x80,  0x1b,  0x36,  0x6c,  0xd8,  0xab,  0x4d,  0x9a,  0x2f,  0x5e,  0xbc,  0x63,  0xc6,  0x97,  0x35,
 0x6a,  0xd4,  0xb3,  0x7d,  0xfa,  0xef,  0xc5,  0x91,  0x39,  0x72,  0xe4,  0xd3,  0xbd,  0x61,  0xc2,  0x9f,
 0x25,  0x4a,  0x94,  0x33,  0x66,  0xcc,  0x83,  0x1d,  0x3a,  0x74,  0xe8,  0xcb,  0x8d,  0x01,  0x02,  0x04,
 0x08,  0x10,  0x20,  0x40,  0x80,  0x1b,  0x36,  0x6c,  0xd8,  0xab,  0x4d,  0x9a,  0x2f,  0x5e,  0xbc,  0x63,
 0xc6,  0x97,  0x35,  0x6a,  0xd4,  0xb3,  0x7d,  0xfa,  0xef,  0xc5,  0x91,  0x39,  0x72,  0xe4,  0xd3,  0xbd,
 0x61,  0xc2,  0x9f,  0x25,  0x4a,  0x94,  0x33,  0x66,  0xcc,  0x83,  0x1d,  0x3a,  0x74,  0xe8,  0xcb,  0x8d
};


static void printWords(Mat &s)
{
    for(int i = 0; i < 4; ++i){
        string aux = to_hex(s[i].byte1);
        cout<<aux<<" ";
    }
    cout<<endl;
    for(int i = 0; i < 4; ++i){
        string aux = to_hex(s[i].byte2);
        cout<<aux<<" ";
    }
    cout<<endl;
    for(int i = 0; i < 4; ++i){
        string aux = to_hex(s[i].byte3);
        cout<<aux<<" ";
    }
    cout<<endl;
    for(int i = 0; i < 4; ++i){
        string aux = to_hex(s[i].byte4);
        cout<<aux<<" ";
    }
    cout<<endl;
}

byte GF_product_p(byte a,byte b){
	byte result = 0;
        int resaux, aaux, baux, xoor;
        for (int i = 0; i < 8; ++i)
        {	byte one = 1;
		byte two = 128;
            byte aut = b&one;
            byte aut2 = a&two;
            if (aut == 1){
		resaux = (int)(result.to_ulong());
                aaux = (int)(a.to_ulong());
		xoor = resaux ^ aaux;
		result = xoor;
		}
		aaux = (int)(a.to_ulong());
		aaux = aaux<<1;
		a = aaux;
		if (aut2 == 128){
                xoor = aaux ^ 27;
                a = xoor;}

		baux = (int)(b.to_ulong());
		baux = baux>>1;
		b = baux;

        }
        return result;
}

static word rotWord(word w)
{
    word aux;
    aux.byte1 = w.byte2;
    aux.byte2 = w.byte3;
    aux.byte3 = w.byte4;
    aux.byte4 = w.byte1;
    return aux;
}

static word subWord(word w)
{
    word aux;
    aux.byte1 = sBox[todecimal(w.byte1)];
    aux.byte2 = sBox[todecimal(w.byte2)];
    aux.byte3 = sBox[todecimal(w.byte3)];
    aux.byte4 = sBox[todecimal(w.byte4)];
    return aux;
}

static Mat subbytes(Mat state)
{
    Mat aux(4);
    for (int i = 0; i < 4; ++i) aux[i] = subWord(state[i]);
    return aux;
}

static Mat shiftRows(Mat state)
{
    Mat aux(4);
    for (int i = 0; i < 4; ++i)
    {
        word aux2;
        aux2.byte1 = state[i].byte1;
        aux2.byte2 = state[(i+1)%4].byte2;
        aux2.byte3 = state[(i+2)%4].byte3;
        aux2.byte4 = state[(i+3)%4].byte4;
        aux[i] = aux2;
    }
    return aux;
}

static Mat mixColumns(Mat state)
{
    Mat aux(4);
    for (int i = 0; i < 4; ++i)
    {
        word aux2;
        aux2.byte1 =  (GF_product_p(0x02,state[i].byte1) ^ GF_product_p(0x03,state[i].byte2)
                            ^ state[i].byte3 ^ state[i].byte4);
        aux2.byte2 =  (state[i].byte1 ^ GF_product_p(0x02,state[i].byte2)
                            ^ GF_product_p(0x03,state[i].byte3) ^ state[i].byte4);
        aux2.byte3 =  (state[i].byte1 ^ state[i].byte2 ^ GF_product_p(0x02,state[i].byte3)
                            ^ GF_product_p(0x03,state[i].byte4));
        aux2.byte4 =  (GF_product_p(0x03,state[i].byte1) ^ state[i].byte2 ^ state[i].byte3
                            ^ GF_product_p(0x02,state[i].byte4));
        aux[i] = aux2;
    }
    return aux;
}

static Mat addRoundKey(Mat state, int round)
{
   Mat aux(4);
   for (int i = 0; i < 4; ++i)
   {
       word aux2;
       aux2.byte1 = (state[i].byte1 ^ arrayWords[round*4 + i].byte1);
       aux2.byte2 = (state[i].byte2 ^ arrayWords[round*4 + i].byte2);
       aux2.byte3 = (state[i].byte3 ^ arrayWords[round*4 + i].byte3);
       aux2.byte4 = (state[i].byte4 ^ arrayWords[round*4 + i].byte4);
       aux[i] = aux2;
   }
   return aux;
}

static void keyExpansion()
{
    arrayWords.resize(44);
    word aux;
    int i = 0;
    while (i < 44)
    {
        if (i < 4)
        {
            aux;
            aux.byte1 = key[i*4];
            aux.byte2 = key[i*4 + 1];
            aux.byte3 = key[i*4 + 2];
            aux.byte4 = key[i*4 + 3];
            arrayWords[i] = aux;
        }
        else
        {
            if (i % 4 == 0)
            {
                word aux;
                aux = rotWord(arrayWords[i-1]);
                aux = subWord(aux);
                aux.byte1 =  (aux.byte1 ^ rCon[i/4]);
                aux.byte1 =  (aux.byte1 ^ arrayWords[i-4].byte1);
                aux.byte2 =  (aux.byte2 ^ arrayWords[i-4].byte2);
                aux.byte3 =  (aux.byte3 ^ arrayWords[i-4].byte3);
                aux.byte4 =  (aux.byte4 ^ arrayWords[i-4].byte4);
                arrayWords[i] = aux;
            }
            else
            {
                word aux;
                aux.byte1 =  (arrayWords[i-1].byte1 ^ arrayWords[i-4].byte1);
                aux.byte2 =  (arrayWords[i-1].byte2 ^ arrayWords[i-4].byte2);
                aux.byte3 =  (arrayWords[i-1].byte3 ^ arrayWords[i-4].byte3);
                aux.byte4 =  (arrayWords[i-1].byte4 ^ arrayWords[i-4].byte4);
                arrayWords[i] = aux;
            }
        }
        ++i;
    }
}

static void encrypt()
{
    Mat state(4);
    for (int i = 0; i < 4; ++i)
    {
        word aux;
        aux.byte1 = block[i*4];
        aux.byte2 = block[i*4 + 1];
        aux.byte3 = block[i*4 + 2];
        aux.byte4 = block[i*4 + 3];
        state[i] = aux;
    }
    cout<<"INITIAL MESSATGE"<<endl;
    printWords(state);
    cout<<"-------"<<endl;
    cout<<"KEY"<<endl;
    printWords(arrayWords);
    cout<<"-------"<<endl;
    int index = 0;
    index += 4;
    state = addRoundKey(state,0);
    for (int round = 1; round < Nr; ++round)
    {

        state = subbytes(state);
        state = shiftRows(state);
        state = mixColumns(state);
        index += 4;
        state = addRoundKey(state,round);
    }
    state = subbytes(state);
    state = shiftRows(state);
    state = addRoundKey(state,Nr);
    cout<<"CIPHERTEXT"<<endl;
    printWords(state);
    cout<<"-------"<<endl;

}

int main(){
  cout<<endl;
  block = { 0x33, 0x43, 0xf6,  0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31,  0x31,  0x98, 0xa2, 0xe0, 0x37,  0x07,  0x34};
  key =   { 0x2b,  0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
  Nb = 4; // number of bits of the block divided by 32 (16 bytes => 128 bits, 128/32 = 4)
  Nk = 4; // number of bits of the key divided by 32 (16 bytes => 128 bits, 128/32 = 4)
  Nr = 10; // number of rounds
  keyExpansion();
  encrypt();
  cout<<endl;
}
